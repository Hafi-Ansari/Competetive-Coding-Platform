[
  {
    "id": 1,
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
    "examples": [
      "Input: nums = [2,7,11,15], target = 9 Output: [0,1]",
      "Input: nums = [3,2,4], target = 6 Output: [1,2]",
      "Input: nums = [3,3], target = 6 Output: [0,1]"
    ],
    "constraints": [
      "2 <= nums.length <= 104",
      "-109 <= nums[i] <= 109",
      "-109 <= target <= 109",
      "Only one valid answer exists."
    ],
    "followUp": "Can you come up with an algorithm that is less than O(n2) time complexity?",
    "testCases": [
      {
        "input": { "nums": [2, 7, 11, 15], "target": 9 },
        "expectedOutput": [0, 1]
      },
      {
        "input": { "nums": [3, 2, 4], "target": 6 },
        "expectedOutput": [1, 2]
      },
      {
        "input": { "nums": [3, 3], "target": 6 },
        "expectedOutput": [0, 1]
      }
    ]
  },

  {
    "id": 2,
    "title": "Two Sum II - Input Array Is Sorted",
    "description": "Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 < numbers.length.\n\nReturn the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.\n\nThe tests are generated such that there is exactly one solution. You may not use the same element twice.\n\nYour solution must use only constant extra space.",
    "examples": [
      "Input: numbers = [2,7,11,15], target = 9\nOutput: [1,2]\nExplanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].",
      "Input: numbers = [2,3,4], target = 6\nOutput: [1,3]\nExplanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].",
      "Input: numbers = [-1,0], target = -1\nOutput: [1,2]\nExplanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2]."
    ],
    "constraints": [
      "2 <= numbers.length <= 3 * 104",
      "-1000 <= numbers[i] <= 1000",
      "numbers is sorted in non-decreasing order.",
      "-1000 <= target <= 1000",
      "The tests are generated such that there is exactly one solution."
    ],
    "testCases": [
      {
        "input": { "numbers": [2, 7, 11, 15], "target": 9 },
        "expectedOutput": [1, 2]
      },
      {
        "input": { "numbers": [2, 3, 4], "target": 6 },
        "expectedOutput": [1, 3]
      },
      {
        "input": { "numbers": [-1, 0], "target": -1 },
        "expectedOutput": [1, 2]
      }
    ]
  },

  {
    "id": 15,
    "title": "3Sum",
    "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\n\nNotice that the solution set must not contain duplicate triplets.",
    "examples": [
      "Input: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExplanation: \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.",
      "Input: nums = [0,1,1]\nOutput: []\nExplanation: The only possible triplet does not sum up to 0.",
      "Input: nums = [0,0,0]\nOutput: [[0,0,0]]\nExplanation: The only possible triplet sums up to 0."
    ],
    "constraints": ["3 <= nums.length <= 3000", "-105 <= nums[i] <= 105"],
    "followUp": null,
    "testCases": [
      {
        "input": { "nums": [-1, 0, 1, 2, -1, -4] },
        "expectedOutput": [
          [-1, -1, 2],
          [-1, 0, 1]
        ]
      },
      {
        "input": { "nums": [0, 1, 1] },
        "expectedOutput": []
      },
      {
        "input": { "nums": [0, 0, 0] },
        "expectedOutput": [[0, 0, 0]]
      }
    ]
  },

  {
    "id": 18,
    "title": "4Sum",
    "description": "Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\n\n0 <= a, b, c, d < n\na, b, c, and d are distinct.\nnums[a] + nums[b] + nums[c] + nums[d] == target\nYou may return the answer in any order.",
    "examples": [
      "Input: nums = [1,0,-1,0,-2,2], target = 0\nOutput: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]",
      "Input: nums = [2,2,2,2,2], target = 8\nOutput: [[2,2,2,2]]"
    ],
    "constraints": [
      "1 <= nums.length <= 200",
      "-109 <= nums[i] <= 109",
      "-109 <= target <= 109"
    ],
    "followUp": null,
    "testCases": [
      {
        "input": { "nums": [1, 0, -1, 0, -2, 2], "target": 0 },
        "expectedOutput": [
          [-2, -1, 1, 2],
          [-2, 0, 0, 2],
          [-1, 0, 0, 1]
        ]
      },
      {
        "input": { "nums": [2, 2, 2, 2, 2], "target": 8 },
        "expectedOutput": [[2, 2, 2, 2]]
      },
      {
        "input": { "nums": [2, 2, 2, 2, 2], "target": 8 },
        "expectedOutput": [[2, 2, 2, 2]]
      }
    ]
  }
]
